/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:5.1.1'
    }
}

apply plugin: 'nebula.netflixoss'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'pmd'
apply plugin: 'application'

bintray {
    pkg {
        version {
            mavenCentralSync {
                sync = false
            }
        }
    }
}

ext {
    archaiusVersion = '2.3.+'
    assetjCoreVersion = '3.11.1'
    guavaVersion = '19.+'
    gsonVersion = '2.8.+'
    guiceVersion = '4.1.0'
    jettyVersion = '9.4.12.v20180830'
    jsonVersion = '20160810'
    junitVersion = '4.10'
    lombokVersion = '1.18.10'
    mantisClientVersion = '1.2.+'
    mantisDiscoveryProtoVersion = '1.2.+'
    mockitoVersion = '1.9.5'
    s3Version = '1.11.566'
    servletApiVersion = '3.1.0'
    spectatorVersion = '0.92.+'
    vavrVersion = '0.10.2'
}

group = 'io.mantisrx'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

tasks.withType(Javadoc).all {
    enabled = false
}


dependencies {
    api('com.netflix.zuul:zuul-core:2.+') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.inject', module: 'guice'
    }
    api('com.netflix.zuul:zuul-guice:2.+') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.inject', module: 'guice'
    }
    implementation('com.netflix.zuul:zuul-groovy:2.+') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.inject', module: 'guice'
    }
    implementation 'com.netflix.blitz4j:blitz4j:1.37.2'
    implementation "com.netflix.governator:governator:1.+"
    implementation "org.apache.commons:commons-lang3:3.+"
    api "io.mantisrx:mantis-discovery-proto:$mantisDiscoveryProtoVersion"
    api "io.mantisrx:mantis-client:$mantisClientVersion"
    api "io.mantisrx:mantis-runtime:$mantisClientVersion"
    api "io.mantisrx:mantis-control-plane-client:$mantisClientVersion"
    api "io.mantisrx:mql-jvm:3.+"
    api "io.vavr:vavr:$vavrVersion"
    api "com.google.inject:guice:$guiceVersion"
    api "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation"org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}


configurations.all {
    resolutionStrategy {
        force "com.google.guava:guava:$guavaVersion"
        force "com.google.inject:guice:$guiceVersion"
        force "com.google.inject.extensions:guice-multibindings:$guiceVersion"
        force "com.google.inject.extensions:guice-grapher:$guiceVersion"
        force "com.google.inject.extensions:guice-assistedinject:$guiceVersion"
        force "javax.servlet:javax.servlet-api:$servletApiVersion"
    }
}

/*
 * Run regular:   ./gradlew run
 * Run benchmark: ./gradlew run -Pbench
 */
run {
    mainClassName = "io.mantisrx.api.Bootstrap"

    applicationDefaultJvmArgs = ["-DTZ=GMT",
                                 "-Darchaius.deployment.environment=test",
                                 "-Dcom.sun.management.jmxremote",
                                 "-Dcom.sun.management.jmxremote.local.only=false",
                                 "-Deureka.validateInstanceId=false",
                                 "-Deureka.mt.num_retries=1"]

    if (project.hasProperty('bench')) {
        println 'Running benchmark configuration...'
        jvmArgs "-Darchaius.deployment.environment=benchmark"
    }
}
